---
import Logo from "@/components/Logo.astro";
import menu from "@/config/menu.json";

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
const { pathname } = Astro.url;
---

<header class="header bg-white dark:bg-gray-900 shadow-sm transition-all duration-300">
  <nav class="navbar container" aria-label="Main navigation">
    <!-- logo -->
    <div class="order-0">
      <a href="/" aria-label="Home">
        <Logo />
      </a>
    </div>
    
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" aria-label="Toggle menu" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center lg:order-1 lg:hidden"
      aria-label="Open menu"
    >
      <svg class="h-6 w-6 fill-current" viewBox="0 0 20 20" aria-hidden="true">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center lg:order-1"
      aria-label="Close menu"
    >
      <svg class="h-6 w-6 fill-current" viewBox="0 0 20 20" aria-hidden="true">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>

    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full lg:order-1 lg:flex lg:w-auto lg:space-x-2"
      role="menubar"
    >
      {
        main.map((menu, index) => (
          <>
            {menu.hasChildren ? (
              <li class="nav-item nav-dropdown group relative cursor-pointer dropdown-button" role="none">
                <button
                  class={`nav-link inline-flex items-center focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 ${
                    menu.children?.map(({ url }) => url).includes(pathname) ||
                    menu.children
                      ?.map(({ url }) => `${url}/`)
                      .includes(pathname)
                      ? "active"
                      : ""
                  }`}
                  aria-expanded="false"
                  aria-haspopup="true"
                  role="menuitem"
                >
                  {menu.name}
                  <svg class="h-4 w-4 fill-current transition-transform group-hover:rotate-180" viewBox="0 0 20 20" aria-hidden="true">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </button>
                <ul
                  id={`dropdown-${index}`}
                  class="nav-dropdown-list mx-auto hidden duration-300 lg:invisible lg:absolute lg:block lg:h-auto lg:w-[13.5rem] lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100 lg:rounded-lg lg:shadow-lg lg:bg-white lg:dark:bg-gray-800"
                  role="menu"
                  aria-label={`${menu.name} submenu`}
                >
                  {menu.children?.map((child) => (
                    <li class="nav-dropdown-item" role="none">
                      <a
                        href={child.url}
                        class={`nav-dropdown-link block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors ${
                          (pathname === `${child.url}/` ||
                            pathname === child.url) &&
                          "text-primary font-semibold"
                        }`}
                        role="menuitem"
                      >
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li class="nav-item" role="none">
                <a
                  href={menu.url}
                  class={`nav-link inline-block lg:block hover:text-primary transition-colors ${
                    (pathname === `${menu.url}/` || pathname === menu.url) &&
                    "active font-semibold"
                  }`}
                  role="menuitem"
                >
                  {menu.name}
                </a>
              </li>
            )}
          </>
        ))
      }
    </ul>
  </nav>
</header>

<script is:inline>
  // Enhanced dropdown functionality
  document.querySelectorAll(".dropdown-button").forEach((button, index) => {
    const dropdown = button.querySelector(`#dropdown-${index}`);
    const link = button.querySelector("button");
    
    button.addEventListener("click", (e) => {
      const isExpanded = link.getAttribute("aria-expanded") === "true";
      link.setAttribute("aria-expanded", !isExpanded);
      dropdown.classList.toggle("hidden");
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", (e) => {
      if (!button.contains(e.target)) {
        link.setAttribute("aria-expanded", "false");
        dropdown.classList.add("hidden");
      }
    });
  });

  // Enhanced sticky header with smooth transition
  document.addEventListener("astro:page-load", () => {
    const header = document.querySelector(".header");
    let lastScroll = 0;
    
    window.addEventListener("scroll", () => {
      const currentScroll = window.scrollY;
      
      if (currentScroll > 0) {
        header.classList.add("header-sticky", "shadow-md");
        if (currentScroll > lastScroll) {
          header.classList.add("header-hide");
        } else {
          header.classList.remove("header-hide");
        }
      } else {
        header.classList.remove("header-sticky", "header-hide", "shadow-md");
      }
      
      lastScroll = currentScroll;
    });
  });
</script>

<style is:global>
  .header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 50;
  }
  
  .header-sticky {
    position: sticky;
    animation: slideDown 0.3s ease-out;
  }
  
  .header-hide {
    transform: translateY(-100%);
    transition: transform 0.3s ease-out;
  }
  
  @keyframes slideDown {
    from {
      transform: translateY(-100%);
    }
    to {
      transform: translateY(0);
    }
  }
  
  .nav-link {
    position: relative;
    padding: 0.5rem 1rem;
  }
  
  .nav-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 1rem;
    right: 1rem;
    height: 2px;
    background-color: currentColor;
    transform: scaleX(0);
    transition: transform 0.3s ease;
  }
  
  .nav-link:hover::after,
  .nav-link.active::after {
    transform: scaleX(1);
  }
</style>
